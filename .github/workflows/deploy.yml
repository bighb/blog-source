name: Deploy Blog

# 触发条件：推送到 main 分支或手动触发
on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

# 设置权限
permissions:
  contents: read
  pages: write
  id-token: write

# 确保同时只运行一个部署
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，用于获取 git 信息
          submodules: recursive  # 递归检出子模块

      - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Enable Corepack and Setup pnpm
      run: |
        corepack enable
        corepack prepare pnpm@latest --activate

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          corepack prepare pnpm@latest --activate

      - name: 安装依赖
        run: |
          # 使用 pnpm 安装依赖，更稳定
          pnpm install --frozen-lockfile || pnpm install
          
          # 验证 hexo 是否可用
          if ! command -v npx hexo &> /dev/null; then
            echo "安装 hexo-cli"
            pnpm add hexo-cli
          fi

      - name: 📊 显示环境信息
        run: |
          echo "Node.js 版本: $(node --version)"
          echo "pnpm 版本: $(pnpm --version)"
          echo "Hexo 版本: $(npx hexo version || echo 'Hexo 未找到')"
          echo "检查依赖安装状态:"
          pnpm list --depth=0 | head -10
          
      - name: 🧹 清理缓存
        run: |
          # 确保 hexo 命令可用
          if command -v npx hexo &> /dev/null; then
            npx hexo clean
          else
            echo "⚠️ hexo 命令不可用，手动清理"
            rm -rf public .deploy_git
          fi

      - name: 🏗️ 生成静态文件
        run: |
          # 确保 hexo 命令可用
          if command -v npx hexo &> /dev/null; then
            npx hexo generate
          else
            echo "❌ hexo 命令不可用，尝试直接运行"
            npm run build
          fi
          
          echo "📊 构建统计:"
          echo "文章数量: $(find source/_posts -name '*.md' 2>/dev/null | wc -l || echo '0')"
          echo "生成文件数量: $(find public -type f 2>/dev/null | wc -l || echo '0')"
          
      - name: 🔍 验证构建结果
        run: |
          if [ ! -f "public/index.html" ]; then
            echo "❌ 构建失败: 缺少 index.html"
            exit 1
          fi
          echo "✅ 构建验证通过"

      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署作业
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
