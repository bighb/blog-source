name: Deploy Blog

# 触发条件：推送到 main 分支或手动触发
on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

# 设置权限
permissions:
  contents: r      - name: 🚀 部署到 GitHub Pages
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          # 配置 Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 克隆目标仓库
          git clone https://x-access-token:${DEPLOY_TOKEN}@github.com/bighb/bighb.github.io.git deploy_repo
  # 构建并部署作业
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，用于获取 git 信息
          submodules: recursive  # 递归检出子模块

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Enable Corepack and Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: |
          # 使用 pnpm 安装依赖
          pnpm install --frozen-lockfile || {
            echo "⚠️ frozen-lockfile 失败，尝试常规安装"
            pnpm install
          }
          
          # 验证 hexo 是否可用
          if ! pnpm exec hexo version &> /dev/null; then
            echo "❌ Hexo 不可用，检查依赖安装"
            exit 1
          fi

      - name: 📊 显示环境信息
        run: |
          echo "Node.js 版本: $(node --version)"
          echo "pnpm 版本: $(pnpm --version)"
          echo "当前工作目录: $(pwd)"
          echo "检查关键文件:"
          ls -la _config.yml package.json 2>/dev/null || echo "⚠️ 配置文件检查失败"
          
      - name: 🧹 清理缓存
        run: |
          # 清理之前的构建产物
          pnpm exec hexo clean || {
            echo "⚠️ hexo clean 失败，手动清理"
            rm -rf public .deploy_git db.json
          }
          echo "✅ 缓存清理完成"

      - name: 🏗️ 生成静态文件
        run: |
          # 生成静态文件
          pnpm run build || {
            echo "❌ build 脚本失败，尝试直接使用 hexo generate"
            pnpm exec hexo generate || {
              echo "❌ 所有构建方案都失败了"
              echo "📊 调试信息:"
              echo "当前目录内容:"
              ls -la
              echo "hexo 版本信息:"
              pnpm exec hexo version || echo "无法获取 hexo 版本"
              exit 1
            }
          }
          
          echo "📊 构建统计:"
          echo "文章数量: $(find source/_posts -name '*.md' 2>/dev/null | wc -l || echo '0')"
          echo "生成文件数量: $(find public -type f 2>/dev/null | wc -l || echo '0')"
          echo "public 目录大小: $(du -sh public 2>/dev/null || echo '未知')"

      - name: 🔍 验证构建结果
        run: |
          # 检查关键文件是否存在
          MISSING_FILES=()
          
          if [ ! -f "public/index.html" ]; then
            MISSING_FILES+=("index.html")
          fi
          
          if [ ! -d "public/archives" ]; then
            MISSING_FILES+=("archives目录")
          fi
          
          if [ ! -f "public/atom.xml" ]; then
            MISSING_FILES+=("atom.xml")
          fi
          
          if [ ! -f "public/sitemap.xml" ]; then
            MISSING_FILES+=("sitemap.xml")
          fi
          
          # 检查是否有CSS和JS文件
          if [ ! -d "public/style" ] && [ ! -d "public/css" ]; then
            MISSING_FILES+=("样式文件目录")
          fi
          
          if [ ${#MISSING_FILES[@]} -gt 0 ]; then
            echo "❌ 构建验证失败，缺少以下文件:"
            printf '%s\n' "${MISSING_FILES[@]}"
            echo "📁 public 目录内容:"
            ls -la public/ || echo "无法列出 public 目录"
            exit 1
          fi
          
          echo "✅ 构建验证通过"
          echo "📊 验证结果:"
          echo "  - index.html: ✓"
          echo "  - archives: ✓"
          echo "  - atom.xml: ✓"
          echo "  - sitemap.xml: ✓"
          echo "  - 样式文件: ✓"

      - name: � 部署到 GitHub Pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 配置 Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 克隆目标仓库
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/bighb/bighb.github.io.git deploy_repo
          
          # 进入目标仓库目录
          cd deploy_repo
          
          # 清空现有内容（保留 .git 目录）
          find . -maxdepth 1 ! -name '.git' ! -name '.' ! -name '..' -exec rm -rf {} +
          
          # 复制新生成的文件
          cp -r ../public/* .
          
          # 添加所有更改
          git add -A
          
          # 检查是否有更改
          if git diff --staged --quiet; then
            echo "📌 没有内容更改，跳过部署"
            exit 0
          fi
          
          # 提交更改
          COMMIT_MSG="Site updated: $(date '+%Y-%m-%d %H:%M:%S')"
          git commit -m "$COMMIT_MSG"
          
          # 推送到 master 分支
          git push origin master
          
          echo "✅ 部署完成！"
          echo "🌐 网站地址: https://bighb.github.io"
